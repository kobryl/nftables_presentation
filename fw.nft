# clear all rules

flush ruleset

# common variables

define DEV_PRIVATE = enp0s8
define DEV_INTERNET = enp0s3
define PRIVATE_ADDR = 192.168.128.0/24
define SERVER = 192.168.128.2

# NAT

define DNAT_PORTS = { 80, 443 }
add table nat

## SNAT

add chain nat postrouting { type nat hook postrouting priority srcnat ; }
add rule nat postrouting ip saddr $PRIVATE_ADDR oifname $DEV_INTERNET masquerade

## DNAT

add chain nat prerouting { type nat hook prerouting priority dstnat ; }
add rule nat prerouting iif enp0s3 tcp dport $DNAT_PORTS dnat to $SERVER

# Filters

define ALLOWED_PORTS = { 53, 80, 443 }
define BANNED_ADDRESSES = { 212.77.98.9 }

add table inet filters

## Allow connections with $ALLOWED_PORTS

add chain inet filters ports
add rule inet filters ports tcp dport $ALLOWED_PORTS accept
add rule inet filters ports tcp sport $ALLOWED_PORTS accept
add rule inet filters ports udp sport $ALLOWED_PORTS accept
add rule inet filters ports udp dport $ALLOWED_PORTS accept

## Ban all addresses from $BANNED_ADDRESSES

add chain inet filters banned_addr
add rule inet filters banned_addr ip daddr $BANNED_ADDRESSES counter reject
add rule inet filters banned_addr continue

## By default drop all incoming and forwarded, allow all outgoing.
add chain inet filters forward { type filter hook forward priority filter ; policy drop ; }
add chain inet filters input { type filter hook input priority filter ; policy drop ; }
add chain inet filters output { type filter hook output priority filter ; policy accept ; }

## Allow loopback

add rule inet filters input iifname lo accept
add rule inet filters output oifname lo accept

## Check if destination is banned

add rule inet filters output jump banned_addr
add rule inet filters forward jump banned_addr

## Allow traffic originated from this machine and private network, drop invalid connections

add rule inet filters input ct state invalid drop
add rule inet filters input ct state established,related accept
add rule inet filters forward ct state invalid drop
add rule inet filters forward ct state established,related accept

## Accept ping for every direction

add rule inet filters input meta l4proto icmp accept
add rule inet filters output meta l4proto icmp accept
add rule inet filters forward meta l4proto icmp accept

## Allow ports from $ALLOWED_PORTS

add rule inet filters input jump ports
add rule inet filters output jump ports
add rule inet filters forward jump ports

# Port knocking

add chain inet filters knock_chain
add rule inet filters input jump knock_chain

define PROTECTED_PORTS = { 22 }

add set inet filters clients {
	type ipv4_addr
	flags timeout
}

add set inet filters clientsv6 {
	type ipv6_addr
	flags timeout
}

add set inet filters candidates {
	type ipv4_addr . inet_service
	flags timeout
}

add set inet filters candidatesv6 {
	type ipv6_addr . inet_service
	flags timeout
}

add rule inet filters knock_chain iifname "lo" return
add rule inet filters knock_chain tcp dport 123 add @candidates { ip saddr . 234 timeout 1s }
add rule inet filters knock_chain tcp dport 123 add @candidatesv6 { ip6 saddr . 234 timeout 1s }
add rule inet filters knock_chain tcp dport 234 ip saddr . tcp dport @candidates add @candidates { ip saddr . 345 timeout 1s }
add rule inet filters knock_chain tcp dport 234 ip6 saddr . tcp dport @candidatesv6 add @candidatesv6 { ip6 saddr . 345 timeout 1s }
add rule inet filters knock_chain tcp dport 345 ip saddr . tcp dport @candidates add @clients { ip saddr timeout 20s } log prefix "Succesful knock: "
add rule inet filters knock_chain tcp dport 345 ip6 saddr . tcp dport @candidatesv6 add @clientsv6 { ip6 saddr timeout 20s }

add rule inet filters knock_chain tcp dport $PROTECTED_PORTS counter ip saddr @clients accept
add rule inet filters knock_chain tcp dport $PROTECTED_PORTS ip6 saddr @clientsv6 accept
add rule inet filters knock_chain tcp dport $PROTECTED_PORTS ct state established,related accept

add rule inet filters knock_chain tcp dport $PROTECTED_PORTS counter reject with tcp reset
